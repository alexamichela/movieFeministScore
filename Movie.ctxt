#BlueJ class context
comment0.target=Movie
comment0.text=\n\ Represents\ an\ object\ of\ type\ Movie.\n\ A\ Movie\ object\ has\ a\ title,\ some\ Actors,\ and\ results\ for\ the\ twelve\ Bechdel\ tests.\n\n\ @author\ (Stella\ K.)\ Kelly\ Cao,\ Alexa\ Halim,\ Marleigh\ Ausbrooks\ \n\ @version\ (28\ Nov\ 2021,\ 4\:35pm)\n
comment1.params=title
comment1.target=Movie(java.lang.String)
comment1.text=\n\ Constructor\ for\ objects\ of\ class\ Movie.\ No\ actors\ and\ no\ results\ \n\ available\ yet.\n
comment10.params=
comment10.target=int\ feministScore()
comment10.text=\n\ Returns\ the\ movie's\ feministScore,\ which\ is\ based\ off\ whether\n\ they\ pass\ the\ Villareal,\ Ko,\ Rees-Davies\ tests\:\n\ \ \ \ \ 0\ if\ they\ pass\ none\n\ \ \ \ \ 1\ if\ they\ pass\ only\ one\n\ \ \ \ \ 2\ if\ they\ pass\ two\n\ \ \ \ \ 3\ if\ they\ pass\ all\ three\n\ \n\ @returns\ their\ feministScore\n
comment11.params=other
comment11.target=int\ compareTo(Movie)
comment11.text=\n\ Method\ compareTo()\ \n\ Compares\ the\ invoking\ and\ input\ movies\ by\ the\ feministscore,\ \n\ breaking\ the\ tie\ lexicographically\ by\ movie\ title\n\ \n\ @param\ other\ \ \ \ \ Movie\ to\ be\ compared\ to\ this\ movie\ \n\ @return\ int\ \ \ \ \ \ 1\ if\ the\ invoking\ movie's\ feminist\ score\ is\ higher\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ or\ if\ the\ feminist\ scores\ are\ the\ same,\ \n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ invoking\ movie\ is\ ranked\ lexicographically\ \n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ higher\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ -1\ if\ the\ invoking\ movie's\ feminist\ score\ is\ lower\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ or\ if\ the\ feminist\ scores\ are\ the\ same,\ \n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ invoking\ movie\ is\ ranked\ lexicographically\ \n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ lower\n
comment12.params=
comment12.target=java.lang.String\ toString()
comment12.text=\n\ Retrns\ a\ string\ representation\ of\ this\ movie.\ for\ easier\ testing,\ \n\ in\ the\ current\ version\ it\ returns\ only\ the\ title\ of\ the\ movie\ and\ \n\ perhaps\ the\ number\ of\ actors\ in\ it.\n\ \n\ @return\ a\ reasonable\ string\ representation\ of\ this\ movie\:\ \n\ includes\ the\ title\ and\ the\ number\ of\ actors\ who\ played\ in\ it.\n
comment13.params=args
comment13.target=void\ main(java.lang.String[])
comment2.params=
comment2.target=java.lang.String\ getTitle()
comment2.text=\n\ Returns\ the\ movie's\ title\n\ \n\ @return\ The\ title\ of\ this\ movie\n
comment3.params=
comment3.target=java.util.Hashtable\ getAllActors()
comment3.text=\n\ Returns\ the\ movie's\ actors\ in\ a\ Hashtable\n\ \n\ @return\ A\ Hashtable\ with\ all\ the\ actors\ who\ played\ in\ this\ movie\n
comment4.params=
comment4.target=java.util.LinkedList\ getActors()
comment4.text=\n\ returns\ a\ Linked\ List\ with\ all\ the\ actor\ names\ who\ played\ in\ \n\ this\ movie.\n\ \n\ @return\ A\ LinkedList\ with\ the\ names\ of\ all\ the\ actors\ who\ played\ \n\ \ \ \ \ \ \ \ \ in\ this\ movie\n
comment5.params=
comment5.target=java.util.Vector\ getAllTestResults()
comment5.text=\n\ returns\ a\ Vector\ with\ all\ the\ Bechdel\ test\ results\ for\ this\ movie\n\ \n\ @return\ A\ Vector\ with\ the\ Bechdel\ test\ results\ for\ this\ movie\:\ A\ \n\ test\ result\ can\ be\ "1"\ or\ "0"\ indicating\ that\ this\ move\ passed\ \n\ or\ did\ not\ pass\ the\ corresponding\ test.\n
comment6.params=results
comment6.target=void\ setTestResults(java.lang.String)
comment6.text=\n\ populates\ the\ testResults\ vector\ with\ "0"\ and\ "1"s,\ each\ \n\ representing\ the\ result\ of\ the\ coresponding\ test\ on\ this\ movie.\ \n\ This\ information\ will\ be\ read\ from\ the\ file\ \n\ "nextBechdel_allTests.csv"\n\ \n\ @param\ results\ \ \ string\ consisting\ of\ of\ 0's\ and\ 1's.\ Each\ one\ \n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ of\ these\ values\ denotes\ the\ result\ of\ the\ \n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ corresponding\ test\ on\ this\ movie\n
comment7.params=other
comment7.target=boolean\ equals(java.lang.Object)
comment7.text=\n\ Tests\ this\ movie\ object\ with\ the\ input\ one\ and\ determines\ whether\ they\ are\ equal.\n\ \n\ @return\ true\ if\ both\ objects\ are\ movies\ and\ have\ the\ same\ title,\ \n\ false\ in\ any\ other\ case.\n
comment8.params=line
comment8.target=Actor\ addOneActor(java.lang.String)
comment8.text=\n\ Takes\ in\ a\ String,\ formatted\ as\ lines\ are\ in\ the\ input\ file\ \n\ ("nextBechdel_castGender.txt"),\ generates\ an\ Actor,\ and\ adds\ the\ \n\ object\ to\ the\ actors\ of\ this\ movie.\ Input\ String\ has\ the\ \n\ following\ formatting\:\ "ACTOR","CHARACTER_NAME","TYPE","BILLING",\n\ "GENDER"\ Example\ of\ input\:\ "Trolls","Ricky\ Dillon","Aspen\ Heitz",\n\ "Supporting","18","Male"\n\ \n\ @param\ line\ \ String\ representing\ the\ information\ of\ each\ Actor\n\ @return\ \ \ \ \ \ The\ Actor\ that\ was\ just\ added\ to\ this\ movie\n
comment9.params=actorsFile
comment9.target=void\ addAllActors(java.lang.String)
comment9.text=\n\ Reads\ the\ input\ file\ ("nextBechdel_castGender.txt"),\ and\ adds\ all\ \n\ its\ Actors\ to\ this\ movie.\ Each\ line\ in\ the\ movie\ has\ the\ \n\ following\ formatting\:\ Input\ String\ has\ the\ following\ formatting\:\ \n\ "MOVIE\ TITLE","ACTOR","CHARACTER_NAME","TYPE","BILLING","GENDER"\ \n\ Example\ of\ input\:\ "Trolls","Ricky\ Dillon","Aspen\ Heitz",\n\ "Supporting","18","Male"\n\ \n\ @param\ actorsFile\ \ \ \ The\ file\ containing\ information\ on\ each\ \n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ actor\ who\ acted\ in\ the\ movie.\n
numComments=14
