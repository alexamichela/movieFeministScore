#BlueJ class context
comment0.target=MovieCollection
comment0.text=\n\ Represents\ a\ collection\ of\ Movies.\ Uses\ a\ LinkedList\ to\ hold\ the\ \n\ movie\ objects.\ Movie\ data\ (title\ and\ test\ results)\ are\ coming\ from\ a\ \n\ file\ named\ "nextBechdel_allTests.txt".\ Data\ regarding\ actors\ who\ \n\ participated\ in\ each\ movie\ is\ read\ from\ a\ file\ named\ \n\ "nextBechdel_castGender.txt".\ Both\ files\ are\ provided\ in\ the\ "data"\ \n\ folder.\n\n\ @author\ Kelly\ Cao,\ Alexa\ Halim,\ Marleigh\ Ausbrooks\ \n\ @version\ December\ 8,\ 2022\n
comment1.params=testsFileName\ castsFileName
comment1.target=MovieCollection(java.lang.String,\ java.lang.String)
comment1.text=\n\ Constructor\ for\ objects\ of\ class\ MovieCollection\n
comment10.params=test1\ test2
comment10.target=java.util.LinkedList\ findAllMoviesPassedEither(int,\ int)
comment10.text=\n\ Returns\ a\ list\ of\ all\ Movies\ that\ pass\ the\ either\ of\ two\ given\ tests\n\ \n\ @param\ test1\ integer\ identifying\ the\ test1-th\ test\ in\ the\ list\ of\ 12\ \n\ \ \ \ \ \ \ \ \ \ Bechdel\ alternatives,\ starting\ from\ zero\n\ @param\ test2\ integer\ identifying\ the\ test2-th\ test\ in\ the\ list\ of\ 12\ \n\ \ \ \ \ \ \ \ \ \ Bechdel\ alternatives,\ starting\ from\ zero\n\ @returns\ A\ list\ of\ all\ Movies\ which\ have\ passed\ either\ test1\ or\ test2\n
comment11.params=test1\ test2
comment11.target=java.util.LinkedList\ findAllMoviesPassedFirstOne(int,\ int)
comment11.text=\n\ Returns\ a\ list\ of\ all\ Movies\ that\ pass\ the\ first\ given\ test\ but\ not\ the\n\ second\ test\n\ \n\ @param\ test1\ integer\ identifying\ the\ test1-th\ test\ in\ the\ list\ of\ 12\ \n\ \ \ \ \ \ \ \ \ \ Bechdel\ alternatives,\ starting\ from\ zero\n\ @param\ test2\ integer\ identifying\ the\ test2-th\ test\ in\ the\ list\ of\ 12\ \n\ \ \ \ \ \ \ \ \ \ Bechdel\ alternatives,\ starting\ from\ zero\n\ @returns\ A\ list\ of\ all\ Movies\ which\ have\ passed\ test1\ but\ not\ test2\n
comment12.params=
comment12.target=javafoundations.PriorityQueue\ rankMovies()
comment12.text=\n\ Returns\ a\ PriorityQueue\ of\ movies\ in\ the\ provided\ data\ based\ on\ \n\ their\ feminist\ score.\ That\ is,\ if\ you\ enqueue\ all\ the\ movies,\ \n\ they\ will\ be\ dequeued\ in\ priority\ order\:\ from\ most\ feminist\ to\ \n\ least\ feminist.\n\ \ \ \ \n
comment13.params=
comment13.target=java.lang.String\ toString()
comment13.text=\n\ Returns\ a\ String\ representing\ this\ MovieCollection\n\ \n\ @returns\ a\ String\ representation\ of\ this\ collection,\ including\ \n\ the\ number\ of\ movies\ and\ the\ movies\ themselves.\n
comment14.params=args
comment14.target=void\ main(java.lang.String[])
comment2.params=
comment2.target=java.util.LinkedList\ getActorNames()
comment2.text=\n\ Returns\ the\ names\ of\ all\ actors\ in\ the\ collection\n\ \n\ @returns\ a\ LinkedList\ with\ the\ names\ of\ all\ actors\n
comment3.params=
comment3.target=java.util.LinkedList\ getActors()
comment3.text=\n\ Returns\ all\ the\ Actors\ in\ the\ collection\n\ \n\ @returns\ a\ LinkedList\ with\ all\ the\ Actors,\ each\ complete\ with\ \n\ their\ name\ and\ gender.\n
comment4.params=
comment4.target=java.util.LinkedList\ getMovies()
comment4.text=\n\ Returns\ all\ the\ movies\ in\ a\ LinkedList\n\ \n\ @returns\ a\ LinkedList\ with\ all\ the\ movies,\ each\ complete\ with\ \n\ its\ title,\ actors\ and\ Bechdel\ test\ results.\n
comment5.params=
comment5.target=java.util.LinkedList\ getMovieTitles()
comment5.text=\n\ Returns\ the\ titles\ of\ all\ movies\ in\ the\ collection\n\ \n\ @returns\ a\ LinkedList\ with\ the\ titles\ of\ all\ the\ movies\n
comment6.params=
comment6.target=void\ readMovies()
comment6.text=\n\ Reads\ the\ input\ file,\ and\ uses\ its\ first\ column\ (movie\ title)\ to\ \n\ create\ all\ movie\ objects.\ Adds\ the\ included\ information\ on\ the\ \n\ Bachdel\ test\ results\ to\ each\ movie.\ It\ is\ perhaps\ better\ to\ make\ \n\ this\ method\ private\n
comment7.params=
comment7.target=void\ readCasts()
comment7.text=\n\ Reads\ the\ casts\ for\ each\ movie,\ from\ input\ casts\ file;\ Assume\ \n\ lines\ in\ this\ file\ are\ formatted\ as\ followes\:\ "MOVIE","ACTOR",\n\ "CHARACTER_NAME","TYPE","BILLING","GENDER"\ For\ example\:\ "Trolls",\n\ "Ricky\ Dillon","Aspen\ Heitz","Supporting","18","Male".\ Notes\:\ 1)\ \n\ each\ movie\ will\ appear\ in\ (potentially)\ many\ consecutive\ lines,\ \n\ one\ line\ per\ actor.\ 2)\ Each\ token\ (title,\ actor\ name,\ etc)\ appears\ \n\ in\ double\ quotes,\ which\ need\ to\ be\ removed\ as\ soon\ as\ the\ tokes\ \n\ are\ read.\ 3)\ If\ a\ movie\ does\ not\ have\ any\ test\ results,\ it\ is\ \n\ ignored\ and\ not\ included\ in\ the\ collection.\ (There\ is\ actually\ one\ \n\ such\ movie)\ It\ is\ perhaps\ better\ to\ make\ this\ method\ private\n
comment8.params=n
comment8.target=java.util.LinkedList\ findAllMoviesPassedTestNum(int)
comment8.text=\n\ Returns\ a\ list\ of\ all\ Movies\ that\ pass\ the\ n-th\ Bechdel\ test\n\ \n\ @param\ n\ integer\ identifying\ the\ n-th\ test\ in\ the\ list\ of\ 12\ \n\ \ \ \ \ \ \ \ \ \ Bechdel\ alternatives,\ starting\ from\ zero\n\ @returns\ A\ list\ of\ all\ Movies\ which\ have\ passed\ the\ n-th\ test\n\ \n
comment9.params=
comment9.target=java.util.LinkedList\ findAllMoviesPassedBechdel()
comment9.text=\n\ Returns\ a\ list\ of\ all\ Movies\ that\ pass\ the\ Bechdel\ test\n\ \n\ @returns\ A\ list\ of\ all\ Movies\ which\ have\ passed\ the\ Bechdel\ test\n
numComments=15
